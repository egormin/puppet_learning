
Puppet interprets any aspect of your system configuration you want to manage (users, files, services, and packages, to give some common examples) as a unit called a resource.
The block of code that describes a resource is called a resource declaration

This resource declaration syntax is composed of three main components:

    Type
    Title
    Attribute value pairs

The type represents the kind of thing that the resource describes
Resource type:
user { 'root':
    ...
  }

Below are some of the core resource types you'll encounter most often:

    user A user
    group A user group
    file A specific file
    package A software package
    service A running service
    cron A scheduled cron job
    exec An external command
    host A host entry

Resource title (title - 'root')
user { 'root':
    ...
  }

Attribute Value Pairs
user { 'root':
  ensure           => present,
  comment          => 'root',
  gid              => '0',
  home             => '/root',
  password         => '$1$jrm5tnjw$h8JJ9mCZLmJvIxvDLjw1M/',
  password_max_age => '99999',
  password_min_age => '0',
  shell            => '/bin/bash',
  uid              => '0',
}
After the colon in that first line comes a hash of attributes and their corresponding values


############# Manifests and classes##############

A manifest is nothing more than some puppet code saved to a file with the .pp extension.

In Puppet's DSL a class is a named block of Puppet code.

A class is a collection of related resources and other classes which, once defined, can be declared as a single unit. Puppet classes are also singleton, which means that unlike classes in object oriented programming, a Puppet class can only be declared a single time on a given node.

A manifest is a file containing Puppet code, and appended with the .pp extension. In this quest, we used manifests in the ./manifests directory each to define a single class, and used a corresponding test manifest in the ./examples directory to declare each of those classes.





